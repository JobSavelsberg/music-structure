{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/promise-worker-bi/dist/esmodules.js","webpack:///./src/app/similarity.js","webpack:///./src/app/workers/ssmWorker/ssmWorker.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","messageIDs","MSGTYPE_QUERY","MSGTYPE_RESPONSE","MSGTYPE_HOST_ID","MSGTYPE_HOST_CLOSE","MSGTYPE_WORKER_ERROR","MSGTYPES","isPromise","obj","then","toFakeError","error","fakeError","message","stack","fileName","columnNumber","lineNumber","fromFakeError","Error","assign","logError","err","console","PWBBase","this","_callbacks","Map","_queryCallback","_onMessage","cb","targetHostID","messageID","result","hostID","_postMessage","query","finalResult","_postResponse","finalError","e","data","Array","isArray","length","indexOf","type","callback","undefined","delete","_handleQuery","PWBWorker","super","_hosts","_maxHostID","SharedWorkerGlobalScope","self","_workerType","addEventListener","port","ports","e2","start","set","keys","next","forEach","postMessage","userMessage","actuallyPostMessage","resolve","reject","messageToSend","Promise","common","_onMessageCommon","cosine","a","b","adotv","amag","bmag","Math","sqrt","promiseWorker","register","segmentObjects","size","ssm","SegmentI","j","sim","pitches","timbres"],"mappings":"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","file":"js/ssmWorker.5c188314.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"349b\");\n","let messageIDs = 0;\nconst MSGTYPE_QUERY = 0;\nconst MSGTYPE_RESPONSE = 1;\nconst MSGTYPE_HOST_ID = 2;\nconst MSGTYPE_HOST_CLOSE = 3;\nconst MSGTYPE_WORKER_ERROR = 4;\nconst MSGTYPES = [MSGTYPE_QUERY, MSGTYPE_RESPONSE, MSGTYPE_HOST_ID, MSGTYPE_HOST_CLOSE, MSGTYPE_WORKER_ERROR]; // Inlined from https://github.com/then/is-promise\n\nconst isPromise = obj => !!obj && (typeof obj === \"object\" || typeof obj === \"function\") && typeof obj.then === \"function\";\n\nconst toFakeError = error => {\n  const fakeError = {\n    name: error.name,\n    message: error.message\n  };\n\n  if (typeof error.stack === \"string\") {\n    fakeError.stack = error.stack;\n  } // These are non-standard properties, I think only in some versions of Firefox\n  // @ts-ignore\n\n\n  if (typeof error.fileName === \"string\") {\n    // @ts-ignore\n    fakeError.fileName = error.fileName;\n  } // @ts-ignore\n\n\n  if (typeof error.columnNumber === \"number\") {\n    // @ts-ignore\n    fakeError.columnNumber = error.columnNumber;\n  } // @ts-ignore\n\n\n  if (typeof error.lineNumber === \"number\") {\n    // @ts-ignore\n    fakeError.lineNumber = error.lineNumber;\n  }\n\n  return fakeError;\n}; // Object rather than FakeError for convenience\n\n\nconst fromFakeError = fakeError => {\n  const error = new Error();\n  return Object.assign(error, fakeError);\n};\n\nconst logError = err => {\n  // Logging in the console makes debugging in the worker easier\n\n  /* eslint-disable no-console */\n  console.error(\"Error in Worker:\");\n  console.error(err); // Safari needs it on new line\n\n  /* eslint-enable no-console */\n};\n\nclass PWBBase {\n  constructor() {\n    // console.log('constructor', worker);\n    this._callbacks = new Map();\n\n    this._queryCallback = () => {}; // @ts-ignore\n\n\n    this._onMessage = this._onMessage.bind(this);\n  }\n\n  register(cb) {\n    // console.log('register', cb);\n    this._queryCallback = cb;\n  } // eslint-disable-next-line\n\n\n  _postMessage(obj, targetHostID) {\n    throw new Error(\"Not implemented\");\n  }\n\n  _postResponse(messageID, error, result, hostID) {\n    // console.log('_postResponse', messageID, error, result);\n    if (error) {\n      logError(error);\n\n      this._postMessage([MSGTYPE_RESPONSE, messageID, toFakeError(error)], hostID);\n    } else {\n      this._postMessage([MSGTYPE_RESPONSE, messageID, null, result], hostID);\n    }\n  }\n\n  _handleQuery(messageID, query, hostID) {\n    // console.log('_handleQuery', messageID, query);\n    try {\n      const result = this._queryCallback(query, hostID);\n\n      if (!isPromise(result)) {\n        this._postResponse(messageID, null, result, hostID);\n      } else {\n        result.then(finalResult => {\n          this._postResponse(messageID, null, finalResult, hostID);\n        }, finalError => {\n          this._postResponse(messageID, finalError, hostID);\n        });\n      }\n    } catch (err) {\n      this._postResponse(messageID, err);\n    }\n  } // Either return messageID and type if further processing is needed, or undefined otherwise\n\n\n  _onMessageCommon(e) {\n    // eslint-disable-line no-undef\n    // console.log('_onMessage', e.data);\n    const message = e.data;\n\n    if (!Array.isArray(message) || message.length < 3 || message.length > 4) {\n      return; // Ignore - this message is not for us\n    }\n\n    if (typeof message[0] !== \"number\" || MSGTYPES.indexOf(message[0]) < 0) {\n      throw new Error(\"Invalid messageID\");\n    }\n\n    const type = message[0];\n\n    if (typeof message[1] !== \"number\") {\n      throw new Error(\"Invalid messageID\");\n    }\n\n    const messageID = message[1];\n\n    if (type === MSGTYPE_QUERY) {\n      const query = message[2];\n\n      if (typeof message[3] !== \"number\" && message[3] !== undefined) {\n        throw new Error(\"Invalid hostID\");\n      }\n\n      const hostID = message[3];\n\n      this._handleQuery(messageID, query, hostID);\n\n      return;\n    }\n\n    if (type === MSGTYPE_RESPONSE) {\n      if (message[2] !== null && typeof message[2] !== \"object\") {\n        throw new Error(\"Invalid error\");\n      }\n\n      const error = message[2] === null ? null : fromFakeError(message[2]);\n      const result = message[3];\n\n      const callback = this._callbacks.get(messageID);\n\n      if (callback === undefined) {\n        // Ignore - user might have created multiple PromiseWorkers.\n        // This message is not for us.\n        return;\n      }\n\n      this._callbacks.delete(messageID);\n\n      callback(error, result);\n      return;\n    }\n\n    return {\n      message,\n      type\n    };\n  }\n\n}\n\nclass PWBHost extends PWBBase {\n  // Only defined on host\n  constructor(worker) {\n    super(); // The following if statement used to check `worker instanceof Worker` but I have recieved\n    // reports that in some weird cases, Safari will inappropriately return false for that, even\n    // in obvious cases like:\n    //\n    //     blob = new Blob([\"self.onmessage = function() {};\"], { type: \"text/javascript\" });\n    //     worker = new Worker(window.URL.createObjectURL(blob));\n    //     console.log(worker instanceof Worker);\n    //\n    // So instead, let's do this test for worker.port which only exists on shared workers.\n    // @ts-ignore\n\n    if (worker.port === undefined) {\n      this._workerType = \"Worker\"; // @ts-ignore\n\n      worker.addEventListener(\"message\", this._onMessage);\n    } else {\n      this._workerType = \"SharedWorker\"; // @ts-ignore - it doesn't know if _worker is Worker or SharedWorker, but I do\n\n      worker.port.addEventListener(\"message\", this._onMessage); // @ts-ignore - it doesn't know if _worker is Worker or SharedWorker, but I do\n\n      worker.port.start(); // Handle tab close. This isn't perfect, but there is no perfect method\n      // http://stackoverflow.com/q/13662089/786644 and this should work like\n      // 99% of the time. It is a memory leak if it fails, but for most use\n      // cases, it shouldn't be noticeable.\n\n      window.addEventListener(\"beforeunload\", () => {\n        // Prevent firing if we don't know hostID yet\n        if (this._hostID !== undefined) {\n          this._postMessage([MSGTYPE_HOST_CLOSE, -1, this._hostID]);\n        }\n      });\n    }\n\n    this._worker = worker;\n    this._hostIDQueue = [];\n  }\n\n  registerError(cb) {\n    // console.log('registerError', cb);\n    this._errorCallback = cb; // Some browsers (Firefox) call onerror on every host, while others\n    // (Chrome) do nothing. Let's disable that everywhere, for consistency.\n\n    this._worker.addEventListener(\"error\", e => {\n      e.preventDefault();\n      e.stopPropagation();\n    });\n  }\n\n  _postMessage(obj) {\n    // console.log('_postMessage', obj);\n    if (this._workerType === \"Worker\") {\n      // @ts-ignore - it doesn't know if _worker is Worker or SharedWorker, but I do\n      this._worker.postMessage(obj);\n    } else if (this._workerType === \"SharedWorker\") {\n      // @ts-ignore - it doesn't know if _worker is Worker or SharedWorker, but I do\n      this._worker.port.postMessage(obj);\n    } else {\n      throw new Error(\"WTF\");\n    }\n  }\n\n  postMessage(userMessage) {\n    // console.log('postMessage', userMessage, targetHostID);\n    const actuallyPostMessage = (resolve, reject) => {\n      const messageID = messageIDs;\n      messageIDs += 1;\n      const messageToSend = [MSGTYPE_QUERY, messageID, userMessage, this._hostID];\n\n      this._callbacks.set(messageID, (error, result) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(result);\n        }\n      });\n\n      this._postMessage(messageToSend);\n    };\n\n    return new Promise((resolve, reject) => {\n      // Don't send a message until hostID is known, otherwise it's a race\n      // condition and sometimes hostID will be undefined.\n      if (this._hostIDQueue !== undefined) {\n        this._hostIDQueue.push(() => {\n          actuallyPostMessage(resolve, reject);\n        });\n      } else {\n        actuallyPostMessage(resolve, reject);\n      }\n    });\n  }\n\n  _onMessage(e) {\n    const common = this._onMessageCommon(e);\n\n    if (!common) {\n      return;\n    }\n\n    const message = common.message,\n          type = common.type;\n\n    if (type === MSGTYPE_HOST_ID) {\n      if (message[2] !== undefined && typeof message[2] !== \"number\") {\n        throw new Error(\"Invalid hostID\");\n      }\n\n      const hostID = message[2];\n      this._hostID = hostID;\n\n      if (this._hostIDQueue !== undefined) {\n        this._hostIDQueue.forEach(func => {\n          // Not entirely sure why setTimeout is needed, might be just for unit tests\n          setTimeout(() => {\n            func();\n          }, 0);\n        });\n\n        this._hostIDQueue = undefined; // Never needed again after initial setup\n      }\n    } else if (type === MSGTYPE_WORKER_ERROR) {\n      if (message[2] !== undefined && message[2] !== null && typeof message[2] === \"object\") {\n        const error = fromFakeError(message[2]);\n\n        if (this._errorCallback !== undefined) {\n          this._errorCallback(error);\n        }\n      }\n    }\n  }\n\n}\n\nclass PWBWorker extends PWBBase {\n  constructor() {\n    super(); // Only actually used for SharedWorker\n\n    this._hosts = new Map();\n    this._maxHostID = -1;\n\n    if ( // @ts-ignore\n    typeof SharedWorkerGlobalScope !== \"undefined\" && // @ts-ignore\n    self instanceof SharedWorkerGlobalScope) {\n      this._workerType = \"SharedWorker\";\n      self.addEventListener(\"connect\", e => {\n        // @ts-ignore\n        const port = e.ports[0];\n        port.addEventListener(\"message\", e2 => this._onMessage(e2)); // eslint-disable-line no-undef\n\n        port.start();\n        this._maxHostID += 1;\n        const hostID = this._maxHostID;\n\n        this._hosts.set(hostID, {\n          port\n        }); // Send back hostID to this host, otherwise it has no way to know it\n\n\n        this._postMessage([MSGTYPE_HOST_ID, -1, hostID], hostID);\n      });\n      self.addEventListener(\"error\", e => {\n        logError(e.error); // Just send to first host, so as to not duplicate error tracking\n\n        const hostID = this._hosts.keys().next().value;\n\n        if (hostID !== undefined) {\n          this._postMessage([MSGTYPE_WORKER_ERROR, -1, toFakeError(e.error)], hostID);\n        }\n      });\n    } else {\n      this._workerType = \"Worker\";\n      self.addEventListener(\"message\", this._onMessage); // Since this is not a Shared Worker, hostID is always 0 so it's not strictly required to\n      // send this back, but it makes the API a bit more consistent if there is the same\n      // initialization handshake in both cases.\n\n      this._postMessage([MSGTYPE_HOST_ID, -1, 0], 0);\n\n      self.addEventListener(\"error\", e => {\n        logError(e.error);\n\n        this._postMessage([MSGTYPE_WORKER_ERROR, -1, toFakeError(e.error)]);\n      });\n    }\n  }\n\n  _postMessage(obj, targetHostID) {\n    // console.log('_postMessage', obj, targetHostID);\n    if (this._workerType === \"SharedWorker\") {\n      // If targetHostID has been deleted, this will do nothing, which is fine I think\n      this._hosts.forEach(({\n        port\n      }, hostID) => {\n        if (targetHostID === undefined || targetHostID === hostID) {\n          port.postMessage(obj);\n        }\n      });\n    } else if (this._workerType === \"Worker\") {\n      // @ts-ignore\n      self.postMessage(obj);\n    } else {\n      throw new Error(\"WTF\");\n    }\n  }\n\n  postMessage(userMessage, targetHostID) {\n    // console.log('postMessage', userMessage, targetHostID);\n    const actuallyPostMessage = (resolve, reject) => {\n      const messageID = messageIDs;\n      messageIDs += 1;\n      const messageToSend = [MSGTYPE_QUERY, messageID, userMessage];\n\n      this._callbacks.set(messageID, (error, result) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(result);\n        }\n      });\n\n      this._postMessage(messageToSend, targetHostID);\n    };\n\n    return new Promise((resolve, reject) => {\n      actuallyPostMessage(resolve, reject);\n    });\n  }\n\n  _onMessage(e) {\n    const common = this._onMessageCommon(e);\n\n    if (!common) {\n      return;\n    }\n\n    const message = common.message,\n          type = common.type;\n\n    if (type === MSGTYPE_HOST_CLOSE) {\n      if (typeof message[2] !== \"number\") {\n        throw new Error(\"Invalid hostID\");\n      }\n\n      const hostID = message[2];\n\n      this._hosts.delete(hostID);\n    }\n  }\n\n}\n\nexport { PWBHost, PWBWorker };\n","export const measures = {\r\n    EUCLIDIAN: 'euclidian',\r\n    MANHATTAN: 'manhattan',\r\n    COSINE: 'cosine',\r\n}\r\n\r\nexport function cosine(a, b){\r\n    var adotv = 0\r\n    var amag = 0\r\n    var bmag = 0\r\n    for(var i = 0; i < a.length; i++) {\r\n      adotv += a[i] * b[i]\r\n      amag += a[i]*a[i]\r\n      bmag += b[i]*b[i]\r\n    }\r\n    amag = Math.sqrt(amag)\r\n    bmag = Math.sqrt(bmag)\r\n    return adotv/(amag*bmag);\r\n}\r\n\r\n\r\nexport function manhattanDistance(a, b){\r\n    let dist = 0;\r\n    for(let i = 0; i < a.length; i++){\r\n        dist += Math.abs(a[i] - b[i]);\r\n    }\r\n    return dist\r\n}\r\n// Manhattan distance scaled back to [0,1]\r\nexport function manhattan(a, b, range){\r\n    return 1-this.manhattanDistance(a,b)/range;\r\n}\r\n\r\n\r\nexport function euclidianDistance(a, b){\r\n    return Math.sqrt(squaredDistance(a, b));\r\n}\r\nexport function maxEuclidianDistance(length, range){\r\n    return Math.sqrt(range*range*length);\r\n}\r\nexport function euclidian(a, b, maxDist){\r\n    return 1-euclidianDistance(a,b)/maxDist;\r\n}\r\n\r\nexport function squaredDistance(a, b){\r\n    let dist = 0;\r\n    for(let i = 0; i < a.length; i++){\r\n        const diff = (a[i] - b[i]);\r\n        dist += diff*diff;\r\n    }\r\n    return dist;\r\n}","import { PWBWorker } from \"promise-worker-bi\";\r\nimport * as sim from \"../../similarity\"\r\n\r\nvar promiseWorker = new PWBWorker();\r\n\r\n\r\npromiseWorker.register((message) => {\r\n    if (message.type === 'message') {\r\n        const segmentObjects = message.message.segmentObjects;\r\n        \r\n        const size = segmentObjects.length;\r\n        const ssm = new Array(size);\r\n        for (let i = 0; i < size; i++) {\r\n            const SegmentI = segmentObjects[i];\r\n            ssm[i] = new Array(size - i);\r\n            for (let j = i; j < size; j++) {\r\n                ssm[i][j - i] = new Array(2);\r\n                ssm[i][j - i][0] = sim.cosine(SegmentI.pitches, segmentObjects[j].pitches);\r\n                ssm[i][j - i][1] = sim.cosine(SegmentI.timbres, segmentObjects[j].timbres);\r\n            }\r\n        }\r\n\r\n        return ssm;\r\n    }\r\n});\r\n\r\n"],"sourceRoot":""}